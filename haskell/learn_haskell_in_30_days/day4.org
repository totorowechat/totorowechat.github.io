#+TITLE: DAY 4
#+AUTHOR: LINGAO JIN
#+EMAIL: jinlingao@outlook.com
#+EXPORT_FILE_NAME: ./exports/day-4
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* Recursion

We mention recursion briefly in the previous chapter. In this chapter,
we'll take a closer look at recursion, why it's important to Haskell
and how we can work out very concise and elegant solutions to problems
by thinking recursively.



** Maximum awesome

The ~maximum~ function takes a list of things that can be ordered
(e.g. instances of the ~Ord~ typeclass) and returns the biggest of
them. 

You'd probably set up a variable to hold the maximum value so far and
then you'd loop through the elements of a list and if an element is
bigger than then the current maximum value, you'd replace it with that
element.

#+BEGIN_SRC haskell
maximum' :: (Ord a) => [a] -> a  
maximum' [] = error "maximum of empty list"  
maximum' [x] = x  
maximum' (x:xs)   
    | x > maxTail = x  
    | otherwise = maxTail  
    where maxTail = maximum' xs  

minimum' :: (Ord a) => [a] -> a
minimum' [] = error "minimum of empty list"
minimum' [x] = x
minimum' (x:xs)
    | x < minTail = x
    | otherwise = minTail
    where minTail = minimum' xs
#+END_SRC


An even clearer way to write this function is to use ~max~. If you
remember, max is a function that takes two numbers and returns the
bigger of them. Here's how we could rewrite maximum' by using max:

#+BEGIN_SRC haskell
maximum' :: (Ord a) => [a] -> a  
maximum' [] = error "maximum of empty list"  
maximum' [x] = x
maximum' (x:xs) = max x (maximum' xs)
#+END_SRC


\begin{equation}
\begin{split}
maximum \: [2,5,1] & \rightarrow max \: 2 \: ( maximum \: [5,1]) \\
                   & \rightarrow max \: 2 \: ( max \: 5 \: (maximum \: [1])) \\
                   & \rightarrow max \: 2 \: ( max \: 5 \: 1) \\
                   & \rightarrow max \: 2 \: 5 \\
                   & \rightarrow 5
\end{split}
\end{equation}

** A few more recursive functions

First off, we'll implement ~replicate~. ~replicate~ takes an ~Int~ and
some element and returns a *list* that has several repetitions of the
same element. For instance, ~replicate 3 5~ returns ~[5,5,5]~. 

#+BEGIN_SRC haskell
replicate' :: (Num i, Ord i) => i -> a -> [a]  
replicate' n x  
    | n <= 0    = []  
    | otherwise = x:replicate' (n-1) x
#+END_SRC

We used guards here instead of patterns because we're testing for a
boolean condition. If ~n~ is less than or equal to 0, return an empty
list. Otherwise return a list that has ~x~ as the first element and
then ~x~ replicated ~n-1~ times as the tail. Eventually, the ~(n-1)~
part will cause our function to reach the edge conditio.

\begin{equation}
\begin{split}
replicate'\:10\:9 \rightarrow &\:9:(replicate'\:9\:3) \\
                  \rightarrow &\:9:9:(replicate'\:8\:3) \\
                            . &\:\\
                            . &\:\\
                            . &\:\\
                  \rightarrow &\:9:9:9:9:9:9:9:9:9:9:(replicate'\:0\:3) \\
                  \rightarrow &\:9:9:9:9:9:9:9:9:9:9:[] \\
\end{split}
\end{equation}

Next up, we'll implement ~take~. It takes a certain number of elements
from a *list*. For instance, ~take 3 [5,4,3,2,1]~ will return
~[5,4,3]~.

#+BEGIN_SRC haskell
take' :: (Num i, Ord i) => i -> [a] -> [a]  
take' n _  
    | n <= 0   = []  
take' _ []     = []  
take' n (x:xs) = x : take' (n-1) xs  
#+END_SRC

~reverse~ simply reverses a list.

#+BEGIN_SRC haskell
reverse' :: [a] -> [a]  
reverse' [] = []  
reverse' (x:xs) = reverse' xs ++ [x]   
#+END_SRC

Because Haskell supports *infinite* lists, our recursion doesn't
really have to have an edge condition.

#+BEGIN_SRC haskell
repeat' :: a -> [a]  
repeat' x = x:repeat' x 
#+END_SRC

Calling ~repeat 3~ will give us a list that starts with 3 and then
has an infinite amount of 3's as a tail. So calling repeat 3 would
evaluate like ~3:repeat 3~, which is ~3:(3:repeat 3)~, which is 
~3:(3:(3:repeat 3))~, etc. repeat 3 will never finish evaluating,
whereas ~take 5 (repeat 3)~ will give us a list of five 3's. It's like
doing ~replicate 5 3~.

Let's implement one more standard library function â€” ~elem~.

#+BEGIN_SRC haskell
elem' :: (Eq a) => a -> [a] -> Bool  
elem' a [] = False  
elem' a (x:xs)  
    | a == x    = True  
    | otherwise = a `elem'` xs   
#+END_SRC

** Quick, sort!

The type signature is going to be 
~quicksort :: (Ord a) => [a] -> [a]~. No surprises there. The edge
condition? Empty list, as is expected. A sorted empty list is an empty
list. Now here comes the main algorithm:

#+BEGIN_QUOTE
a sorted list is a list that has all the values smaller than (or equal
to) the head of the list in front (and those values are sorted), then
comes the head of the list in the middle and then come all the values
that are bigger than the head (they're also sorted).
#+END_QUOTE

#+BEGIN_SRC haskell
quicksort :: (Ord a) => [a] -> [a]  
quicksort [] = []  
quicksort (x:xs) =   
    let smallerSorted = quicksort [a | a <- xs, a <= x]  
        biggerSorted = quicksort [a | a <- xs, a > x]  
    in  smallerSorted ++ [x] ++ biggerSorted    
#+END_SRC

#+BEGIN_EXAMPLE
([5,1,9,4,6,7,3]) -> ([1,4,3]) ++ [5] ++ ([9,6,7])

-- left part [1,4,3]
([1,4,3]) -> [] ++ [1] ++ ([4,3]) 
          -> [] ++ [1] ++ ([3]) ++ [4] ++ []
          -> [] ++ [1] ++ [] ++ [3] ++ [] ++ [4] ++ []

-- right part [9,6,7]
([9,6,7]) -> ([6,7]) ++ [9] ++ [] 
          -> [] ++ [6] ++ ([7]) ++ [9] ++ []
          -> [] ++ [6] ++ [] ++ [7] ++ [] ++ [9] ++ []

[] ++ [1] ++ [] ++ [3] ++ [] ++ [4] ++ [] ++ [5] ++ [] ++ [6] ++ []
   ++ [7] ++ [] ++ [9] ++ []
#+END_EXAMPLE

** Thinking recursively

We did quite a bit of recursion so far and as you've probably noticed,
there's a pattern here. Usually you define an edge case and then you
define a function that does something between some element and the
function applied to the rest. It doesn't matter if it's a list, a tree
or any other data structure. A sum is the first element of a list plus
the sum of the rest of the list. A product of a list is the first
element of the list times the product of the rest of the list.The
length of a list is one plus the length of the tail of the list.
Ekcetera, ekcetera ...

Of course, these also have edge cases. Usually the edge case is some
scenario where a recursive application doesn't make sense. When
dealing with lists, the edge case is most often the empty list. If
you're dealing with trees, the edge case is usually a node that
doesn't have any children.

It's similar when you're dealing with numbers recursively. Usually it
has to do with some number and the function applied to that number
modified. We did the factorial function earlier and it's the product
of a number and the factorial of that number minus one. Such a
recursive application doesn't make sense with zero, because factorials
are defined only for positive integers. Often the edge case value
turns out to be an identity. The identity for multiplication is 1
because if you multiply something by 1, you get that something back.
Also when doing sums of lists, we define the sum of an empty list as 0
and 0 is the identity for addition. In quicksort, the edge case is the
empty list and the identity is also the empty list, because if you add
an empty list to a list, you just get the original list back.

So when trying to think of a recursive way to solve a problem, try to
think of when a recursive solution doesn't apply and see if you can
use that as an edge case, think about identities and think about
whether you'll break apart the parameters of the function (for
instance, lists are usually broken into a head and a tail via pattern
matching) and on which part you'll use the recursive call.

* Higher order functions

Haskell functions can take functions as parameters and return 
functions as return values. A function that does either of those is 
called a higher order function. Higher order functions aren't just a 
part of the Haskell experience, they pretty much are the Haskell 
experience. It turns out that if you want to define computations by 
defining what stuff is instead of defining steps that change some 
state and maybe looping them, higher order functions are 
indispensable. They're a really powerful way of solving problems and 
thinking about programs.

** Curried functions

Every function in Haskell officially only takes one parameter. So how 
is it possible that we defined and used several functions that take 
more than one parameter so far? Well, it's a clever trick! All the 
functions that accepted several parameters so far have been *curried 
functions*.
 
Let's take our good friend, the ~max~ function. It looks like it 
takes two parameters and returns the one that's bigger. Doing ~max 4 
5~ first creates a function that takes a parameter and returns either 
4 or that parameter, depending on which is bigger. Then, ~5~ is 
applied to that function and that function produces our desired 
result. That sounds like a mouthful but it's actually a really cool 
concept. The following two calls are equivalent:

#+BEGIN_EXAMPLE
ghci> max 4 5  
5  
ghci> (max 4) 5  
5  
#+END_EXAMPLE

Putting a space between two things is simply function application. 
The space is sort of like an operator and it has the highest 
precedence. Let's examine the type of ~max~. It's ~max :: (Ord a) => 
a -> a -> a~. That can also be written as ~max :: (Ord a) => a -> (a 
-> a)~. That could be read as: ~max~ takes an a and returns (that's 
the ~->~) a function that takes an ~a~ and returns an ~a~. That's why 
the return type and the parameters of functions are all simply 
separated with arrows.

So how is that beneficial to us? Simply speaking, if we call a 
function with too few parameters, we get back a partially applied 
function, meaning a function that takes as many parameters as we left 
out.

#+BEGIN_SRC haskell
-- Take a look at this offensively simple function:
multThree :: (Num a) => a -> a -> a -> a  
multThree x y z = x * y * z 
#+END_SRC

What really happens when we do ~multThree 3 5 9~ or 
~((multThree 3)5) 9)~ ? First, ~3~ is applied to ~multThree~, 
because they're separated by a space. That creates a *function* that 
takes one parameter and returns a *function*. So then ~5~ is applied 
to that, which creates a function that will take a parameter and 
multiply it by ~15~. ~9~ is applied to that function and the result 
is ~135~ or something. Remember that this function's type could also 
be written as ~multThree :: (Num a) => a -> (a -> (a -> a))~ The 
thing before the ~->~ is the parameter that a function takes and the 
thing after it is what it returns. So our function takes an ~a~ and 
returns a function of type ~(Num a) => a -> (a -> a)~. Similarly, 
this function takes an ~a~ and returns a function of type 
~(Num a) => a -> a~. And this function, finally, just takes an ~a~ 
and returns an ~a~. Take a look at this:

#+BEGIN_SRC
ghci> let multTwoWithNine = multThree 9  
ghci> multTwoWithNine 2 3  
54  
ghci> let multWithEighteen = multTwoWithNine 2  
ghci> multWithEighteen 10  
180  
#+END_SRC

By calling functions with too few parameters, so to speak, we're 
creating new functions on the fly. What if we wanted to create a 
function that takes a number and compares it to ~100~? We could do 
something like this:

#+BEGIN_SRC haskell
compareWithHundred :: (Num a, Ord a) => a -> Ordering  
compareWithHundred x = compare 100 x  
#+END_SRC

If we call it with ~99~, it returns a ~GT~. Simple stuff. Notice that 
the ~x~ is on the right hand side on both sides of the equation. Now 
let's think about what ~compare 100~ returns. It returns a function 
that takes a number and compares it with ~100~. Wow! Isn't that the 
function we wanted? We can rewrite this as:

#+BEGIN_SRC haskell
compareWithHundred :: (Num a, Ord a) => a -> Ordering  
compareWithHundred = compare 100  
#+END_SRC

The type declaration stays the same, because ~compare 100~ returns a 
function. Compare has a type of ~(Ord a) => a -> (a -> Ordering)~ and 
calling it with ~100~ returns a ~(Num a, Ord a) => a -> Ordering~. 
The additional class constraint sneaks up there because ~100~ is also 
part of the ~Num~ typeclass.

*Yo! Make sure you really understand how curried functions and 
partial application work because they're really important!*




