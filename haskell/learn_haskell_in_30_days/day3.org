#+TITLE: DAY 3
#+AUTHOR: LINGAO JIN
#+EMAIL: jinlingao@outlook.com
#+EXPORT_FILE_NAME: ./exports/day-3
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* Syntax in Functions

** Pattern matching

When defining functions, you can define separate function bodies for
different patterns. This leads to really neat code that's simple and
readable. You can pattern match on any data type â€” numbers, 
characters, lists, tuples, etc.

#+BEGIN_SRC haskell
lucky :: (Integral a) => a -> String  
lucky 7 = "LUCKY NUMBER SEVEN!"  
lucky x = "Sorry, you're out of luck, pal!"   
#+END_SRC

When you call lucky, the patterns will be checked from top to bottom
and when it conforms to a pattern, the corresponding function body
will be used. The only way a number can conform to the first pattern
here is if it is 7. If it's not, it falls through to the second
pattern, which matches anything and binds it to ~x~.

#+BEGIN_SRC haskell
sayMe :: (Integral a) => a -> String  
sayMe 1 = "One!"  
sayMe 2 = "Two!"  
sayMe 3 = "Three!"  
sayMe 4 = "Four!"  
sayMe 5 = "Five!"  
sayMe x = "Not between 1 and 5"  
#+END_SRC

*Note* that if we moved the last pattern (the catch-all one) to the
top, it would always say ~"Not between 1 and 5"~.

We can also define a factorial function recursively, the way it is
usually defined in mathematics.

#+BEGIN_SRC haskell
factorial :: (Integral a) => a -> a  
factorial 0 = 1  
factorial n = n * factorial (n - 1)  
#+END_SRC

Pattern matching can also *fail*. If we define a function like this:

#+BEGIN_SRC haskell
charName :: Char -> String  
charName 'a' = "Albert"  
charName 'b' = "Broseph"  
charName 'c' = "Cecil"  
#+END_SRC

and then try to call it with an input that we didn't expect, this is
what happens:

#+BEGIN_SRC haskell
ghci> charName 'a'  
"Albert"  
ghci> charName 'b'  
"Broseph"  
ghci> charName 'h'  
"*** Exception: tut.hs:(53,0)-(55,21): Non-exhaustive patterns in function charName 
#+END_SRC

When making patterns, we should always include a catch-all pattern so
that our program doesn't crash if we get some unexpected input.

To add together two vectors, we add their x components separately and
then their y components separately. Here's how we would have done it
if we didn't know about pattern matching:

#+BEGIN_SRC haskell
addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)
addVectors a b = (fst a + fst b, snd a + snd b)
#+END_SRC

Well, that works, but there's a better way to do it. Let's modify the
function so that it uses pattern matching.

#+BEGIN_SRC haskell
addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)
#+END_SRC

The type of ~addVectors~ (in both cases) is ~addVectors :: (Num a) =>
(a, a) -> (a, a) - > (a, a)~, so we are guaranteed to get two pairs as
parameters.

~fst~ and ~snd~ extract the components of pairs. But what about
triples? Well, there are no provided functions that do that but we can
make our own.

#+BEGIN_SRC haskell
first :: (a, b, c) -> a  
first (x, _, _) = x  
  
second :: (a, b, c) -> b  
second (_, y, _) = y  
  
third :: (a, b, c) -> c  
third (_, _, z) = z
#+END_SRC

The ~_~ means the same thing as it does in list comprehensions. It
means that we really don't care what that part is, so we just write a
~_~.

Which reminds me, you can also pattern match in list comprehensions.
Check this out:

#+BEGIN_SRC haskell
ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]  
ghci> [a+b | (a,b) <- xs]  
[4,7,6,8,11,4]
#+END_SRC

Now that we know how to pattern match against list, let's make our own
implementation of the function.

#+BEGIN_SRC haskell
head' :: [a] -> a  
head' [] = error "Can't call head on an empty list, dummy!"  
head' (x:_) = x 

ghci> head' [4,5,6]  
4  
ghci> head' "Hello"  
'H'  

tell :: (Show a) => [a] -> String  
tell [] = "The list is empty"  
tell (x:[]) = "The list has one element: " ++ show x  
tell (x:y:[]) = "The list has two elements: " ++ show x ++ " and " ++ show y  
tell (x:y:_) = "This list is long. The first two elements are: " ++ show x ++ " and " ++ show y  

length' :: (Num b) => [a] -> b  
length' [] = 0  
length' (_:xs) = 1 + length' xs  

sum' :: (Num a) => [a] -> a  
sum' [] = 0  
sum' (x:xs) = x + sum' xs  

#+END_SRC

Those are a handy way of breaking something up according to a pattern
and binding it to names whilst still keeping a reference to the whole
thing. You do that by putting a name and an ~@~ in front of a pattern.


#+BEGIN_SRC haskell
capital :: String -> String  
capital "" = "Empty string, whoops!"  
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]  
#+END_SRC

** Guards, guards!

Whereas patterns are a way of making sure a value conforms to some
form and deconstructing it, guards are a way of testing whether some
property of a value (or several of them) are true or false. 

#+BEGIN_SRC haskell
bmiTell :: (RealFloat a) => a -> String  
bmiTell bmi  
    | bmi <= 18.5 = "You're underweight, you emo, you!"  
    | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"  
    | otherwise   = "You're a whale, congratulations!"  
#+END_SRC

Guards are indicated by pipes that follow a function's name and its
parameters. A guard is basically a boolean expression. If it evaluates
to ~True~, then the corresponding function body is used. If it 
evaluates to ~False~, checking drops through to the next guard and so
on. 

*This is very reminiscent of a big if else tree in imperative
languages, only this is far better and more readable.*

Many times, the last guard is otherwise. otherwise is defined simply
as ~otherwise = True~ and catches everything.

Of course we can use guards with functions that take as many
parameters as we want.

#+BEGIN_SRC haskell
bmiTell :: (RealFloat a) => a -> a -> String  
bmiTell weight height  
    | weight / height ^ 2 <= 18.5 = "You're underweight, you emo, you!"  
    | weight / height ^ 2 <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | weight / height ^ 2 <= 30.0 = "You're fat! Lose some weight, fatty!"  
    | otherwise                 = "You're a whale, congratulations!"  
#+END_SRC

Guards can also be written *inline*, although I'd advise against that
because it's less readable, even for very short functions. But to
demonstrate, we could write max' like this:

#+BEGIN_SRC haskell
max' :: (Ord a) => a -> a -> a  
max' a b | a > b = a | otherwise = b 
#+END_SRC

Moving on: let's implement our own compare by using guards.

#+BEGIN_SRC haskell
myCompare :: (Ord a) => a -> a -> Ordering  
a `myCompare` b  
    | a > b     = GT  
    | a == b    = EQ  
    | otherwise = LT  
#+END_SRC

** Where!?

In the previous section, Notice that we repeat ~weight / height ^ 2~
here three times.

Well, we can modify our function like this:

#+BEGIN_SRC haskell
bmiTell :: (RealFloat a) => a -> a -> String  
bmiTell weight height  
    | bmi <= 18.5 = "You're underweight, you emo, you!"  
    | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"  
    | otherwise   = "You're a whale, congratulations!"  
    where bmi = weight / height ^ 2  

-- We could go a bit overboard and present our function like this:

bmiTell :: (RealFloat a) => a -> a -> String  
bmiTell weight height  
    | bmi <= skinny = "You're underweight, you emo, you!"  
    | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"  
    | otherwise     = "You're a whale, congratulations!"  
    where bmi = weight / height ^ 2  
          skinny = 18.5  
          normal = 25.0  
          fat = 30.0  

-- You can also use where bindings to pattern match! We could have
-- rewritten the where section of our previous function as:

bmiTell :: (RealFloat a) => a -> a -> String  
bmiTell weight height  
    | bmi <= skinny = "You're underweight, you emo, you!"  
    | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"  
    | otherwise     = "You're a whale, congratulations!"  
    where bmi = weight / height ^ 2  
          (skinny, normal, fat) = (18.5, 25.0, 30.0)  

-- Let's make another fairly trivial function where we get a first and
-- a last name and give someone back their initials.

initials :: String -> String -> String  
initials firstname lastname = [f] ++ ". " ++ [l] ++ "."  
    where (f:_) = firstname  
          (l:_) = lastname  

-- Just like we've defined constants in where blocks, you can also
-- define functions.

alcBmis :: (RealFloat a) => [(a, a)] -> [a]  
calcBmis xs = [bmi w h | (w, h) <- xs]  
    where bmi weight height = weight / height ^ 2

#+END_SRC


** Let it be


This is how we could define a function that gives us a cylinder's
surface area based on its height and radius:

#+BEGIN_SRC haskell
cylinder :: (RealFloat a) => a -> a -> a  
cylinder r h = 
    let sideArea = 2 * pi * r * h  
        topArea = pi * r ^2  
    in  sideArea + 2 * topArea
#+END_SRC

The form is ~let <bindings> in <expression>~. The difference is that
let bindings are expressions themselves. where bindings are just
syntactic constructs.

#+BEGIN_SRC haskell
ghci> [if 5 > 3 then "Woo" else "Boo", if 'a' > 'b' then "Foo" else "Bar"]  
["Woo", "Bar"]  
ghci> 4 * (if 10 > 5 then 10 else 0) + 2  
42  

-- You can also do that with let bindings.

ghci> 4 * (let a = 9 in a + 1) + 2  
42  

-- They can also be used to introduce functions in a local scope:

ghci> [let square x = x * x in (square 5, square 3, square 2)]  
[(25,9,4)]  

-- If we want to bind to several variables inline, we obviously
-- can't align them at columns. That's why we can separate them with
-- semicolons.

ghci> (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)  
(6000000,"Hey there!")  

-- You don't have to put a semicolon after the last binding but you
-- can if you want. Like we said before, you can pattern match with
-- let bindings. They're very useful for quickly dismantling a tuple
-- into components and binding them to names and such.

ghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100  
600 

-- You can also put let bindings inside list comprehensions. Let's
-- rewrite our previous example of calculating lists of weight-height
-- pairs to use a let inside a list comprehension instead of defining
-- an auxiliary function with a where.

calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2]

-- we could make our function return only the BMIs of fat people.

calcBmis :: (RealFloat a) => [(a, a)] -> [a]
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2, bmi >= 25.0]

-- The in part can also be omitted when defining functions and
-- constants directly in GHCi. If we do that, then the names will be
-- visible throughout the entire interactive session.

let zoot x y z = x * y + z  
zoot 3 9 2
let boot x y z = x * y + z in boot 3 4 2

#+END_SRC

Since let bindings are expressions and are fairly local in their
scope, they can't be used across guards. Some people prefer where
bindings because the names come after the function they're being used
in. That way, the function body is closer to its name and type
declaration and to some that's more readable.

** Case expressions

Many imperative languages (C, C++, Java, etc.) have ~case~ syntax and
if you've ever programmed in them, you probably know what it's about.

Pattern matching on parameters in function definitions! Well, that's
actually just syntactic sugar for case expressions. These two pieces
of code do the same thing and are interchangeable:

#+BEGIN_SRC haskell
head' :: [a] -> a  
head' [] = error "No head for empty lists!"  
head' (x:_) = x  

head' :: [a] -> a  
head' xs = case xs of [] -> error "No head for empty lists!"  
                      (x:_) -> x
-- As you can see, the syntax for case expressions is pretty simple:

case expression of pattern -> result  
                   pattern -> result  
                   pattern -> result
#+END_SRC

expression is matched against the patterns. The pattern matching
action is the same as expected: the first pattern that matches the
expression is used. If it falls through the whole case expression and
no suitable pattern is found, a runtime error occurs.

Whereas pattern matching on function parameters can only be done when
defining functions, case expressions can be used pretty much anywhere.
For instance:

#+BEGIN_SRC haskell
describeList :: [a] -> String  
describeList xs = "The list is " ++ case xs of [] -> "empty."  
                                               [x] -> "a singleton list."   
                                               xs -> "a longer list."  
#+END_SRC

They are useful for pattern matching against something in the middle
of an expression. Because pattern matching in function definitions is
syntactic sugar for case expressions, we could have also defined this
like so:

#+BEGIN_SRC haskell
describeList :: [a] -> String  
describeList xs = "The list is " ++ what xs  
    where what [] = "empty."  
          what [x] = "a singleton list."  
          what xs = "a longer list."  
#+END_SRC
