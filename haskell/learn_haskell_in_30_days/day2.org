#+TITLE: DAY 2
#+AUTHOR: LINGAO JIN
#+EMAIL: jinlingao@outlook.com
#+EXPORT_FILE_NAME: ./exports/day-2
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* List Comprehension

A basic comprehension for a set that contains the first ten even 
natural numbers is

\begin{equation}
S = \{ 2x | x \in \mathbb{N}, x \leq 10\}
\end{equation}

The part before the pipe is called the output function, $x$ is the
variable, $\mathbb{N}$ is the input set and $x \leq 10$ is the
predicate. 

Getting the first 10 even numbers

#+BEGIN_SRC bash
ghci> [x*2 | x <- [1..10]]  
[2,4,6,8,10,12,14,16,18,20] 
#+END_SRC

Now let's add a condition (or a predicate) to that comprehension.

#+BEGIN_SRC bash
ghci> [x*2 | x <- [1..10], x*2 >= 12]  
[12,14,16,18,20]
#+END_SRC

How about if we wanted all numbers from 50 to 100 whose remainder when
divided with the number 7 is 3?

#+BEGIN_SRC bash
ghci> [ x | x <- [50..100], x `mod` 7 == 3]
[52,59,66,73,80,87,94]
#+END_SRC

Note that weeding out lists by predicates is also called *filtering*.
Now for another example. Let's say we want a comprehension that 
replaces each odd number greater than 10 with "BANG!" and each odd 
number that's less than 10 with "BOOM!".

#+BEGIN_SRC bash
boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
ghci> boomBangs [7..13]  
["BOOM!","BOOM!","BANG!","BANG!"]  
#+END_SRC

The last part of the comprehension is the *predicate*. The function 
odd returns ~True~ on an odd number and ~False~ on an even one. The
element is included in the list only if all the predicates evaluate to
~True~.

We can include several predicates. If we wanted all numbers from 10 to
20 that are not 13, 15 or 19, we'd do:

#+BEGIN_SRC bash
ghci> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]
[10,11,12,14,16,17,18,20]
#+END_SRC

Not only can we have multiple predicates in list comprehensions (an 
element must satisfy all the predicates to be included in the 
resulting list), we can also draw from *several* lists. 

If we have two lists, [2,5,10] and [8,10,11] and we want to get the 
products of all the possible combinations between numbers in those 
lists

#+BEGIN_SRC bash
ghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]
[16,20,22,40,50,55,80,100,110]  
#+END_SRC

As expected, the length of the new list is 9. What if we wanted all 
possible products that are more than 50?

#+BEGIN_SRC bash
ghci> [ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]
[55,80,100,110]
#+END_SRC

How about a list comprehension that combines a list of adjectives and 
a list of nouns … for epic hilarity.

#+BEGIN_SRC bash
ghci> let nouns = ["hobo","frog","pope"]  
ghci> let adjectives = ["lazy","grouchy","scheming"]  
ghci> [adjective ++ " " ++ noun | adjective <- adjectives, noun <- nouns]  
["lazy hobo","lazy frog","lazy pope","grouchy hobo","grouchy frog",  
"grouchy pope","scheming hobo","scheming frog","scheming pope"]
#+END_SRC

Let's write our own version of ~length~! We'll call it ~length'~.

#+BEGIN_SRC haskell
length' xs = sum [1 | _ <- xs]
#+END_SRC

~_~ means that we don't care what we'll draw from the list anyway so 
instead of writing a variable name that we'll never use, we just write
~_~. This function replaces every element of a list with 1 and then 
sums that up. This means that the resulting sum will be the length of
our list.

because strings are lists, we can use list comprehensions to process
and produce strings. Here's a function that takes a string and removes
everything except uppercase letters from it.

#+BEGIN_SRC bash
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
# testing it out:
ghci> removeNonUppercase "Hahaha! Ahahaha!"
"HA"
ghci> removeNonUppercase "IdontLIKEFROGS"
"ILIKEFROGS"
#+END_SRC

The predicate here does all the work. It says that the character will
be included in the new list only if it's an element of the list
~['A'..'Z']~.

Let's remove all odd numbers without flattening the list.

#+BEGIN_SRC bash
ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]  
ghci> [ [ x | x <- xs, even x ] | xs <- xxs]  
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]
#+END_SRC

You can write list comprehensions across several lines. So if you're
not in GHCI, it's better to split longer list comprehensions across
multiple lines, especially if they're nested.

* Tuples

1. They are denoted with parentheses and their components are
   separated by commas.
2. Tuples are used when you know exactly how many values you want to 
   combine and its type depends on how many components it has and the
   types of the components.

#+BEGIN_QUOTE
Personal understanding *Tuples* has two attributes, *size* and *type*.
Instead List only got type. So ~[(1,1), (1,2,3)]~ is invalid because
tuple ~(1,1)~ and ~(1,2,3)~ is in different types they got different
*size*.
#+END_QUOTE

** Tuples Function

#+BEGIN_SRC bash
# fst takes a pair and returns its first component.
ghci> fst (8,11)  
8
ghci> fst ("Wow", False)  
"Wow"

# snd takes a pair and returns its second component. Surprise!
ghci> snd (8,11)  
11  
ghci> snd ("Wow", False)  
False  

# zip  takes two lists and then zips them together into one list by 
# joining the matching elements into pairs.
ghci> zip [1,2,3,4,5] [5,5,5,5,5]  
[(1,5),(2,5),(3,5),(4,5),(5,5)]  
ghci> zip [1 .. 5] ["one", "two", "three", "four", "five"]  
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")] 
ghci> zip [1..] ["apple", "orange", "cherry", "mango"]  
[(1,"apple"),(2,"orange"),(3,"cherry"),(4,"mango")]
#+END_SRC

which right triangle that has integers for all sides and all sides
equal to or smaller than 10 has a perimeter of 24?

#+BEGIN_SRC haskell
-- First, let's try generating all triangles with sides equal to or 
-- smaller than 10
let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]
-- Next, we'll add a condition that they all have to be right
-- triangles. 
let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
-- We're almost done. Now, we just modify the function by saying that
-- we want the ones where the perimeter is 24.
let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]
#+END_SRC

* Types and Typeclasses

Now we'll use GHCI to examine the types of some expressions. 

#+BEGIN_SRC bash
ghci> :t 'a'  
'a' :: Char  
ghci> :t True  
True :: Bool  
ghci> :t "HELLO!"  
"HELLO!" :: [Char]  
ghci> :t (True, 'a')  
(True, 'a') :: (Bool, Char)  
ghci> :t 4 == 5  
4 == 5 :: Bool  
bomb
#+END_SRC

~::~ is read as "has type of". ~(True, 'a')~ has a type of ~(Bool, 
Char)~, ~('a','b','c')~ would have the type of ~(Char, Char, Char)~.

Functions also have types. We can choose to give them an explicit type
declaration. This is generally considered to be good practice except 
when writing very short functions.

From here on, we'll give all the functions that we make type 
declarations.

#+BEGIN_SRC haskell
removeNonUppercase :: [Char] -> [Char]  
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
#+END_SRC

~removeNonUppercase~ has a type of ~[Char] -> [Char]~, meaning that it
maps from a ~String~ to a ~String~. The ~[Char]~ type is synonymous 
with String. so it's clearer if we write ~removeNonUppercase :: String
 -> String~.

But how do we write out the type of a function that takes several 
parameters?

#+BEGIN_SRC haskell
addThree :: Int -> Int -> Int -> Int  
addThree x y z = x + y + z
#+END_SRC

Later on we'll see why they're all just separated with ~->~ instead of
having some more explicit distinction between the return types and the
parameters like ~Int, Int, Int -> Int~ or something.

If you want to give your function a type declaration but are unsure as
to what it should be, you can always just write the function without
it and then check it with ~:t~. Functions are expressions too, so ~:t~
works on them without a problem.

~Int~ stands for integer. Usually on *32-bit* machines the maximum 
possible ~Int~ is 2147483647 and the minimum is -2147483648.

~Integer~ stands for, er … also integer. ~Integer~ stands for, er … 
also integer. ~Int~, however, is more efficient.

#+BEGIN_SRC bash
factorial :: Integer -> Integer  
factorial n = product [1..n]  
ghci> factorial 50  
30414093201713378043612608166064768844377641568960512000000000000
#+END_SRC

~Float~ is a real floating point with single precision.

#+BEGIN_SRC
circumference :: Float -> Float  
circumference r = 2 * pi * r  
ghci> circumference 4.0  
25.132742  
#+END_SRC

~Double~ is a real floating point with double the precision!

#+BEGIN_SRC
circumference' :: Double -> Double  
circumference' r = 2 * pi * r  
ghci> circumference' 4.0  
25.132741228718345  
#+END_SRC

~Bool~ is a boolean type. It can have only two values: ~True~ and
~False~.

~Char~ represents a character. It's denoted by *single quotes*. A list
of characters is a ~String~.

~Tuples~ are types but they are dependent on their length as well as 
the types of their components. ~()~ is also a type which can only have
a single value: ~()~.

** Type variables

What's the type of ~head~ function?

#+BEGIN_SRC bash
# Let's check!
ghci> :t head  
head :: [a] -> a 
#+END_SRC

Remember that we previously stated that types are written in *capital* 
case, so ~a~ can't exactly be a type. Because it's not in capital case
it's actually a *type variable*. That means that ~a~ can be of any 
type.

This is much like generics in other languages, only in Haskell it's 
much more powerful because it allows us to easily write very general
functions if they don't use any specific behavior of the types in 
them. Functions that have type variables are called polymorphic
functions.

** Typeclasses 101

A typeclass is a sort of *interface* that defines some behavior. You
can think of them kind of as Java interfaces, only better.

What's the type signature of the ~==~ function?

#+BEGIN_SRC
ghci> :t (==)  
(==) :: (Eq a) => a -> a -> Bool
#+END_SRC

#+BEGIN_QUOTE
*Note:* the equality operator, ~==~ is a function. So are ~+~, ~*~,
~-~, ~/~ and pretty much all operators. If a function is comprised
only of special characters, it's considered an infix function by 
default. If we want to examine its type, pass it to another function
or call it as a prefix function, we have to surround it in
parentheses.
#+END_QUOTE

The ~=>~ symbol is called a *class constraint*. the equality function
takes any two values that are of the same type and returns a ~Bool~.
The type of those two values must be a member of the ~Eq~ class (this
was the class constraint).

The ~Eq~ typeclass provides an interface for testing for equality. Any
type where it makes sense to test for equality between two values of
that type should be a member of the ~Eq~ class. All standard Haskell
types except for *IO* (the type for dealing with input and output) and
functions are a part of the ~Eq~ typeclass.

The ~elem~ function has a type of ~(Eq a) => a -> [a] -> Bool~ because
it uses ~==~ over a list to check whether some value we're looking for
is in it.

** Some basic typeclasses:

- ~Eq~ is used for types that support equality testing.
  #+BEGIN_SRC
  ghci> 5 == 5  
  True  
  ghci> 5 /= 5  
  False  
  ghci> 'a' == 'a'  
  True  
  ghci> "Ho Ho" == "Ho Ho"  
  True  
  ghci> 3.432 == 3.432  
  True
  #+END_SRC
- ~Ord~ is for types that have an ordering.
  #+BEGIN_SRC
  ghci> :t (>)  
  (>) :: (Ord a) => a -> a -> Bool  
  #+END_SRC
  ~Ord~ covers all the standard comparing functions. ~Ordering~ is a
  type that can be ~GT~, ~LT~ or ~EQ~, meaning greater than, lesser
  than and equal, respectively.

  To be a member of ~Ord~, a type must first have membership in the
  prestigious and exclusive ~Eq~ club.
  
  #+BEGIN_SRC
  ghci> "Abrakadabra" < "Zebra"  
  True  
  ghci> "Abrakadabra" `compare` "Zebra"  
  LT  
  ghci> 5 >= 2  
  True  
  ghci> 5 `compare` 3  
  GT
  #+END_SRC
- ~Show~, Members of Show can be presented as ~String~. It takes a
  value whose type is a member of Show and presents it to us as a
  ~String~.
  
  #+BEGIN_SRC
  ghci> show 3  
  "3"  
  ghci> show 5.334  
  "5.334"  
  ghci> show True  
  "True"
  #+END_SRC
- ~Read~ is sort of the opposite typeclass of ~Show~.
  #+BEGIN_SRC
  ghci> read "True" || False  
  True  
  ghci> read "8.2" + 3.8  
  12.0  
  ghci> read "5" - 2  
  3  
  ghci> read "[1,2,3,4]" ++ [3]  
  [1,2,3,4,3]  
  #+END_SRC
  
  So far so good. But
  #+BEGIN_SRC
  ghci> read "4"  
  <interactive>:1:0:  
      Ambiguous type variable `a' in the constraint:  
        `Read a' arising from a use of `read' at <interactive>:1:0-7  
      Probable fix: add a type signature that fixes these type variable(s)  
  #+END_SRC

  ~Read~ returns a type that's part of Read but if we don't try to use
  it in some way later, it has no way of knowing which type. That's
  why we can use explicit type annotations.
  
  We do that by adding ~::~ at the end of the expression and then
  specifying a type.

  #+BEGIN_SRC
  ghci> read "5" :: Int  
  5  
  ghci> read "5" :: Float  
  5.0  
  ghci> (read "5" :: Float) * 4  
  20.0  
  ghci> read "[1,2,3,4]" :: [Int]  
  [1,2,3,4]  
  ghci> read "(3, 'a')" :: (Int, Char)  
  (3, 'a')  
  #+END_SRC

- ~Enum~ members are sequentially ordered types — they can be
  enumerated.

- ~Bounded~ members have an upper and a lower bound.
  #+BEGIN_SRC
  ghci> minBound :: Int  
  -2147483648  
  ghci> maxBound :: Char  
  '\1114111'  
  ghci> maxBound :: Bool  
  True  
  ghci> minBound :: Bool  
  False
  #+END_SRC
- ~Num~ is a numeric typeclass. Its members have the property of being
  able to act like numbers. Let's examine the type of a number.
  #+BEGIN_SRC
  ghci> :t 20  
  20 :: (Num t) => t
  ghci> 20 :: Int  
  20  
  ghci> 20 :: Integer  
  20  
  ghci> 20 :: Float  
  20.0  
  ghci> 20 :: Double  
  20.0  
  #+END_SRC
